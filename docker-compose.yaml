version: '3'

services:
  backend:
    image: 'primisen/belarus-architecture-map:latest'
    build: .
    container_name: backend
    depends_on:
      elastic:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/architecture-map?currentSchema=architecture_map
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - "8080:8080"

  db:
    image: 'postgres:13.1-alpine'
    container_name: db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGUSER=${PGUSER}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 3s
      timeout: 3s
      retries: 30
    volumes:
      - /opt/architecture-map-belarus/pgdata:/var/lib/postgresql/data

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: elastic
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    healthcheck:
      test: curl -u -k http://localhost:9200
      interval: 10s
      timeout: 5s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.1
    container_name: logstash
    env_file:
      - .env
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    volumes:
      - ./logstash/postgres_to_elasticsearch.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/postgresql-42.7.3.jar:/usr/share/logstash/postgresql-42.7.3.jar
    depends_on:
      elastic:
        condition: service_healthy
      db:
        condition: service_healthy
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
