input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db:5432/architecture-map?currentSchema=architecture_map"
    jdbc_user => "${POSTGRES_USER}"
    jdbc_password => "${POSTGRES_PASSWORD}"
    schedule => "0 6 * * * America/Chicago"
    statement => "
    	SELECT
    		c.id AS construction_id,
    		c.name AS construction_name, 
    		c.description AS construction_description, 
    		c.building_date AS building_date, 
    		c.building_century AS building_century,
    		a.id AS address_id, 
    		a.region AS region, 
    		a.locality AS locality, 
    		a.district AS district,
    		a.street AS street, 
    		a.house_number AS house_number,
    		st.id AS architectural_style_id,
    		st.name AS architectural_style_name,
    		st.description AS architectural_style_description,
    		i.id AS image_id,
    		i.url AS image_url,
    		s.id AS source_id,
    		s.name AS source_name,
    		s.url AS source_url
    		 
    	FROM construction c
    	LEFT JOIN address a ON a.id=c.address_id
    	LEFT JOIN architectural_style st ON st.id=c.architectural_style_id 
    	LEFT JOIN construction_image ci ON ci.construction_id=c.id 
    	LEFT JOIN image i ON i.id=ci.image_id 
    	LEFT JOIN source s ON s.id=i.source_id;
    	"
  }
}

filter {
  aggregate {
     task_id => "%{construction_id}"
     code => "
     	map['id'] = event.get('construction_id')
     	map['name'] = event.get('construction_name')
     	map['description'] =  event.get('construction_description')
     	map['buildingDate'] = event.get('building_date')
     	map['buildingCentury'] = event.get('building_century')
     	map['images'] = {
     	    'id' => event.get('image_id'),
     	    'url' => event.get('image_url'), 
     	    'source' => {
     	    	'id' => event.get('source_id'),
     	    	'url' => event.get('source_url'),
     	    	'name' => event.get('source_name')
     	    }
     	    
     	}
     	map['address'] = {
     	    'id' => event.get('address_id'),
     	    'region' => event.get('region'),
     	    'locality' => event.get('locality'),
     	    'district' => event.get('district'),
     	    'street' => event.get('street'),
     	    'houseNumber' => event.get('house_number')
     	}
     	map['architecturalStyle'] = {
     	     'id' => event.get('architectural_style_id'),
     	     'name' => event.get('architectural_style_name'),
     	     'description' => event.get('architectural_style_description'),
     	     'shortDescription' => event.get('short_description'),
     	     'yearsActive' => event.get('years_active')
     	}
     event.cancel()"
     push_previous_map_as_event => true
     timeout => 30
  }
}

output {
  elasticsearch {
    hosts => ["http://elastic:9200"]
    index => "construction"
    document_id => "%{id}" 
  }
}
