input {
    jdbc {
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.7.3.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://db:5432/architecture-map?currentSchema=architecture_map"
        jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "${POSTGRES_PASSWORD}"
        schedule => "0 6 * * * America/Chicago"
        statement => "
            SELECT
                a.id AS article_id,
                a.title AS article_title,
                a.content AS article_content,
                a.short_description AS article_short_description,
                t.id AS tag_id,
                t.name AS tag_name,
                i.id AS image_id,
                i.url AS image_url,
                s.id AS source_id,
                s.name AS source_name,
                s.url AS source_url

            FROM article a
            LEFT JOIN tag_article ta ON ta.article_id=a.id
            LEFT JOIN tag t ON t.id=ta.tag_id
            LEFT JOIN image i ON i.id=a.demonstrative_image_id
            LEFT JOIN source s ON s.id=i.source_id;
            "
    }
}

filter {
    aggregate {
        task_id => "%{article_id}"
            code => "
                map['id'] = event.get('article_id')
                map['title'] = event.get('article_title')
                map['content'] = event.get('article_content')
                map['shortDescripption'] = event.get('article_short_description')
                map['tag'] ||= []
                map['tag'] << {
                    'id' => event.get('tag_id'),
                    'name' => event.get('tag_name')
                }
                map['demonstrativeImage'] = {
                    'id' => event.get('image_id'),
                    'url' => event.get('image_url'),
                    'source' => {
                        'id' => event.get('source_id'),
                        'url' => event.get('source_url'),
                        'name' => event.get('source_name')
                    }

                }
                event.cancel()"
        push_previous_map_as_event => true
        timeout => 30

    }
}

output {
    elasticsearch {
        hosts => ["https://es01:9200"]
        user => "${ELASTIC_USERNAME}"
        password => "${ELASTIC_PASSWORD}"
        ssl_certificate_verification => false
        index => "article"
        document_id => "%{id}"
    }
}
